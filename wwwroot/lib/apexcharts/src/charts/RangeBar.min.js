/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/apexcharts@3.45.2/src/charts/RangeBar.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import Bar from"./Bar";import Graphics from"../modules/Graphics";import Utils from"../utils/Utils";class RangeBar extends Bar{draw(i,e){let s=this.w,t=new Graphics(this.ctx);this.rangeBarOptions=this.w.config.plotOptions.rangeBar,this.series=i,this.seriesRangeStart=s.globals.seriesRangeStart,this.seriesRangeEnd=s.globals.seriesRangeEnd,this.barHelpers.initVariables(i);let a=t.group({class:"apexcharts-rangebar-series apexcharts-plot-series"});for(let r=0;r<i.length;r++){let o,n,l,h,b,g,d=s.globals.comboCharts?e[r]:r,p=t.group({class:"apexcharts-series",seriesName:Utils.escapeString(s.globals.seriesNames[d]),rel:r+1,"data:realIndex":d});this.ctx.series.addCollapsedClassToSeries(p,d),i[r].length>0&&(this.visibleI=this.visibleI+1);let x=0,c=0;this.yRatio.length>1&&(this.yaxisIndex=d);let v=this.barHelpers.initialPositions();n=v.y,g=v.zeroW,o=v.x,c=v.barWidth,x=v.barHeight,l=v.xDivision,h=v.yDivision,b=v.zeroH;let u=t.group({class:"apexcharts-datalabels","data:realIndex":d}),y=t.group({class:"apexcharts-rangebar-goals-markers"});for(let e=0;e<s.globals.dataPoints;e++){const t=this.barHelpers.getStrokeWidth(r,e,d),a=this.seriesRangeStart[r][e],P=this.seriesRangeEnd[r][e];let m=null,I=null,R=null;const f={x:o,y:n,strokeWidth:t,elSeries:p};let H=this.seriesLen;if(s.config.plotOptions.bar.rangeBarGroupRows&&(H=1),void 0===s.config.series[r].data[e])break;if(this.isHorizontal){R=n+x*this.visibleI;let i=(h-x*H)/2;if(s.config.series[r].data[e].x){let s=this.detectOverlappingBars({i:r,j:e,barYPosition:R,srty:i,barHeight:x,yDivision:h,initPositions:v});x=s.barHeight,R=s.barYPosition}m=this.drawRangeBarPaths({indexes:{i:r,j:e,realIndex:d},barHeight:x,barYPosition:R,zeroW:g,yDivision:h,y1:a,y2:P,...f}),c=m.barWidth}else{s.globals.isXNumeric&&(o=(s.globals.seriesX[r][e]-s.globals.minX)/this.xRatio-c/2),I=o+c*this.visibleI;let i=(l-c*H)/2;if(s.config.series[r].data[e].x){let s=this.detectOverlappingBars({i:r,j:e,barXPosition:I,srtx:i,barWidth:c,xDivision:l,initPositions:v});c=s.barWidth,I=s.barXPosition}m=this.drawRangeColumnPaths({indexes:{i:r,j:e,realIndex:d},barWidth:c,barXPosition:I,zeroH:b,xDivision:l,...f}),x=m.barHeight}const W=this.barHelpers.drawGoalLine({barXPosition:m.barXPosition,barYPosition:R,goalX:m.goalX,goalY:m.goalY,barHeight:x,barWidth:c});W&&y.add(W),n=m.y,o=m.x;let X=this.barHelpers.getPathFillColor(i,r,e,d),B=s.globals.stroke.colors[d];this.renderSeries({realIndex:d,pathFill:X,lineFill:B,j:e,i:r,x:o,y:n,y1:a,y2:P,pathFrom:m.pathFrom,pathTo:m.pathTo,strokeWidth:t,elSeries:p,series:i,barHeight:x,barWidth:c,barXPosition:I,barYPosition:R,barWidth:c,elDataLabelsWrap:u,elGoalsMarkers:y,visibleSeries:this.visibleI,type:"rangebar"})}a.add(p)}return a}detectOverlappingBars({i:i,j:e,barYPosition:s,barXPosition:t,srty:a,srtx:r,barHeight:o,barWidth:n,yDivision:l,xDivision:h,initPositions:b}){const g=this.w;let d=[],p=g.config.series[i].data[e].rangeName;const x=g.config.series[i].data[e].x,c=Array.isArray(x)?x.join(" "):x,v=g.globals.labels.map((i=>Array.isArray(i)?i.join(" "):i)).indexOf(c),u=g.globals.seriesRange[i].findIndex((i=>i.x===c&&i.overlaps.length>0));return this.isHorizontal?(s=g.config.plotOptions.bar.rangeBarGroupRows?a+l*v:a+o*this.visibleI+l*v,u>-1&&!g.config.plotOptions.bar.rangeBarOverlap&&(d=g.globals.seriesRange[i][u].overlaps,d.indexOf(p)>-1&&(s=(o=b.barHeight/d.length)*this.visibleI+l*(100-parseInt(this.barOptions.barHeight,10))/100/2+o*(this.visibleI+d.indexOf(p))+l*v))):(v>-1&&(t=g.config.plotOptions.bar.rangeBarGroupRows?r+h*v:r+n*this.visibleI+h*v),u>-1&&!g.config.plotOptions.bar.rangeBarOverlap&&(d=g.globals.seriesRange[i][u].overlaps,d.indexOf(p)>-1&&(t=(n=b.barWidth/d.length)*this.visibleI+h*(100-parseInt(this.barOptions.barWidth,10))/100/2+n*(this.visibleI+d.indexOf(p))+h*v))),{barYPosition:s,barXPosition:t,barHeight:o,barWidth:n}}drawRangeColumnPaths({indexes:i,x:e,xDivision:s,barWidth:t,barXPosition:a,zeroH:r}){let o=this.w,n=i.i,l=i.j;const h=this.yRatio[this.yaxisIndex];let b=i.realIndex;const g=this.getRangeValue(b,l);let d=Math.min(g.start,g.end),p=Math.max(g.start,g.end);void 0===this.series[n][l]||null===this.series[n][l]?d=r:(d=r-d/h,p=r-p/h);const x=Math.abs(p-d),c=this.barHelpers.getColumnPaths({barXPosition:a,barWidth:t,y1:d,y2:p,strokeWidth:this.strokeWidth,series:this.seriesRangeEnd,realIndex:i.realIndex,i:b,j:l,w:o});if(o.globals.isXNumeric){const i=this.getBarXForNumericXAxis({x:e,j:l,realIndex:b,barWidth:t});e=i.x,a=i.barXPosition}else e+=s;return{pathTo:c.pathTo,pathFrom:c.pathFrom,barHeight:x,x:e,y:p,goalY:this.barHelpers.getGoalValues("y",null,r,n,l),barXPosition:a}}drawRangeBarPaths({indexes:i,y:e,y1:s,y2:t,yDivision:a,barHeight:r,barYPosition:o,zeroW:n}){let l=this.w;const h=n+s/this.invertedYRatio,b=n+t/this.invertedYRatio,g=Math.abs(b-h),d=this.barHelpers.getBarpaths({barYPosition:o,barHeight:r,x1:h,x2:b,strokeWidth:this.strokeWidth,series:this.seriesRangeEnd,i:i.realIndex,realIndex:i.realIndex,j:i.j,w:l});return l.globals.isXNumeric||(e+=a),{pathTo:d.pathTo,pathFrom:d.pathFrom,barWidth:g,x:b,goalX:this.barHelpers.getGoalValues("x",n,null,i.realIndex,i.j),y:e}}getRangeValue(i,e){const s=this.w;return{start:s.globals.seriesRangeStart[i][e],end:s.globals.seriesRangeEnd[i][e]}}}export default RangeBar;
//# sourceMappingURL=/sm/dfbc836665132d1da95c5166878abd916e07efe78f4f863c64a12f80a5f70472.map